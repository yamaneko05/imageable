// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String    @id @default(uuid())
  authId     String    @unique
  profile    Profile?
  followedBy User[]    @relation("UserFollows")
  following  User[]    @relation("UserFollows")
  posts      Post[]
  comments   Comment[]
  LikedPosts Like[]
}

model Profile {
  id          String  @id @default(uuid())
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique
  name        String
  image       String?
  description String?
}

// model Post
model Post {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  description String?
  createdAt   DateTime  @default(now())
  medias      Media?
  comments    Comment[]
  likedUsers  Like[]
}

// model Media
model Media {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String @unique
}

// model Comment
model Comment {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// model Like
model Like {
  post    Post     @relation(fields: [postId], references: [id])
  postId  String
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  likedAt DateTime @default(now())

  @@id([postId, userId])
}
